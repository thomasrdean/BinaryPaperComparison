#ifndef DNS_H
#define DNS_H
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>
#include "packet.h"
#include "globals.h"
#define ResourceRecord_DNS_VAL (1)
#define ResourceRecordA_DNS_VAL (2)
#define ResourceRecordAAAA_DNS_VAL (3)
#define ResourceRecordCNAME_DNS_VAL (4)
#define ResourceRecordSOA_DNS_VAL (5)
#define ResourceRecordOPT_DNS_VAL (6)
#define ResourceRecordNS_DNS_VAL (7)
#define InlineWord_DNS_VAL (8)
#define EndWord_DNS_VAL (9)
#define ReferenceWord_DNS_VAL (10)
#define NullWord_DNS_VAL (11)
typedef struct {
    uint16_t transactionid;
    uint16_t flags;
    uint16_t numquestion;
    uint16_t numanswer;
    uint16_t numauthority;
    uint16_t numadditional;
    unsigned long questionlength;
    unsigned long questioncount;
    Queryy_DNS *question;
    unsigned long answerlength;
    unsigned long answercount;
    ResourceRecord1_DNS *answer;
    unsigned long authoritylength;
    unsigned long authoritycount;
    ResourceRecord2_DNS *authority;
    unsigned long additionallength;
    unsigned long additionalcount;
    ResourceRecord3_DNS *additional;
} PDU_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t class;
} Queryy_DNS;
typedef struct {
    uint32_t type;
    union {
        ResourceRecord_DNS resourcerecord_dns;
    } ptr;
} ResourceRecord1_DNS;
typedef struct {
    uint32_t type;
    union {
        ResourceRecord_DNS resourcerecord_dns;
    } ptr;
} ResourceRecord2_DNS;
typedef struct {
    uint32_t type;
    union {
        ResourceRecord_DNS resourcerecord_dns;
    } ptr;
} ResourceRecord3_DNS;
typedef struct {
    uint32_t type;
    union {
        ResourceRecordA_DNS resourcerecorda_dns;
        ResourceRecordAAAA_DNS resourcerecordaaaa_dns;
        ResourceRecordCNAME_DNS resourcerecordcname_dns;
        ResourceRecordSOA_DNS resourcerecordsoa_dns;
        ResourceRecordOPT_DNS resourcerecordopt_dns;
        ResourceRecordNS_DNS resourcerecordns_dns;
    } ptr;
} ResourceRecord_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t class;
    uint32_t timetolive;
    uint16_t datalength;
    uint32_t address;
} ResourceRecordA_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t class;
    uint32_t timetolive;
    uint16_t datalength;
    unsigned char address [16];
} ResourceRecordAAAA_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t class;
    uint32_t timetolive;
    uint16_t datalength;
    Domain_DNS cname;
} ResourceRecordCNAME_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t class;
    uint32_t timetolive;
    uint16_t datalength;
    Domain_DNS primarynameserver;
    Domain_DNS reponsibleauthority;
    uint32_t serialnumber;
    uint32_t refreshinterval;
    uint32_t retryinterval;
    uint32_t expirelimit;
    uint32_t minimumttl;
} ResourceRecordSOA_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t udppayloadsize;
    uint8_t higherbitsinextendedrcode;
    uint8_t edns0version;
    uint16_t z;
    uint16_t datalength;
} ResourceRecordOPT_DNS;
typedef struct {
    Domain_DNS name;
    uint16_t type;
    uint16_t class;
    uint32_t timetolive;
    uint16_t datalength;
    Domain_DNS nameserver;
} ResourceRecordNS_DNS;
typedef struct {
    unsigned long wordslength;
    unsigned long wordscount;
    Word_DNS *words;
} Domain_DNS;
typedef struct {
    uint32_t type;
    union {
        InlineWord_DNS inlineword_dns;
        EndWord_DNS endword_dns;
    } ptr;
} Word_DNS;
typedef struct {
    uint32_t type;
    union {
        ReferenceWord_DNS referenceword_dns;
        NullWord_DNS nullword_dns;
    } ptr;
} EndWord_DNS;
typedef struct {
    uint8_t length;
    uint32_t length_POS;
    unsigned long letters_length;
    unsigned char *letters;
} InlineWord_DNS;
typedef struct {
    uint8_t header;
    uint8_t reference;
} ReferenceWord_DNS;
typedef struct {
    uint8_t header;
} NullWord_DNS;
bool parseDNS (PDU_DNS *pdu_dns, PDU *thePDU, char *name, uint8_t endianness);
void freePDU_DNS (PDU_DNS *mainpdu);
#endif
